<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="configuration.xsl"?>

<configuration>
    <property>
        <name>PORT</name>
        <value>80</value>
        <description>HTTP PORT</description>
    </property>
    <property>
        <name>www_folder</name>
        <value>/var/www/html/</value>
        <description>Where to put the web files?</description>
    </property>
    <property>
        <name>servername</name>
        <value>hostname</value>
        <description>The name of the server. if blank or set to 'hostname', use the evaluated hostname (probably fqdn)</description>
    </property>
    <property>
        <name>admin_user</name>
        <value>twiki-admin</value>
        <description>
            Username of the twiki admin user.
        </description>
    </property>
    <property>
        <name>authentication_method</name>
        <value>HBAC</value>
        <description>Which method to use in twiki authentication?. Options are HBAC, LDAP or NONE.
        HBAC: Use PAM  (Pluggable Authentication Modules) for twiki to find users and authenticate them.
        	 This will automatically create accounts in twiki for users registered on the system, and so integrate with FreeIPA if you have it installed.
        	 You can control access using HBAC rules to the machine. If a user can login to the machine, they can reach the twiki.
       	LDAP: Use Active Directory provided by FreeIPA, in this case you will need a bind user and also the bind user password.
        	You can control the user access here based upon ldap groups
        NONE: Use default TWiki authentication based on user registration
        </description>
    </property>
    <property>
        <name>ldap_bind_password</name>
        <value>0</value>
    	<property-type>PASSWORD</property-type>
        <value-attributes>
        	<type>password</type>
        </value-attributes>
        <description>
            Password of the binding user. If using ldap this must also be set!
        </description>
    </property>
    <property>
        <name>ldap_group</name>
        <value>twiki</value>
        <description>
            Name of the ldap group where twiki will look for its users.
        </description>
    </property>
    <property>
        <name>ldap_bind_user</name>
        <value>kave_bind_user</value>
        <description>
            Username of any ldap binding.
        </description>
    </property>
    <property>
        <name>template_000_default</name>
        <value># Created automatically with Ambari
# All manual changes will be undone in the case of a server restart
# Edit the template through the Ambari interface instead
TraceEnable Off
RequestHeader unset Proxy early
ServerSignature Off
ServerTokens Prod
Listen {{PORT}}
ServerName "{{servername}}"
DocumentRoot "{{www_folder}}"
        </value>
        <description>In order to ensure the general apache settings we make are picked up, such as the port number, we create 0000_default.conf in the apache directory
        Advanced users will want to edit this manually.</description>
    </property>
    <property>
        <name>authtest_httpd_conf</name>
        <value># Created automatically with Ambari
# All manual changes will be undone in the case of a server restart
# Edit the template through the Ambari interface instead

# Authorization test html
# Avoid all browser/cgi/TWiki config issues by testing the basic httpd LDAP configuration here
# If the user can access /twiki/authconf/index.html this shows the system is working

BrowserMatchNoCase ^$ blockAccess
RequestHeader unset Proxy early

#### Change the path to match your local installation
&lt;Directory "{{install_dir}}authtest"&gt;
    AllowOverride None
# NOTE: For Apache 2.4 and later use "Require all granted" instead of the next two lines:
    Order Allow,Deny
    Allow from all
    Deny from env=blockAccess

        {% if ldap_enabled %}

        AuthType Basic
        AuthName "LDAP Authentication"
        AuthBasicProvider ldap
        AuthzLDAPAuthoritative on
        AuthLDAPURL ldap://{{ldap_host}}:{{ldap_port}}/cn=users,cn=accounts,{{ldap_base}}?{{ldap_uid}} NONE
        AuthLDAPBindDN {{ldap_uid}}={{ldap_bind_user}},cn=sysaccounts,cn=etc,{{ldap_base}}
        AuthLDAPBindPassword {{ldap_bind_password}}
        AuthLDAPGroupAttributeIsDN on
        Require ldap-group cn={{ldap_group}},cn=groups,cn=accounts,{{ldap_base}}

        {% elif enable_pam_auth %}
        AllowOverride None
        AuthName "KAVE Login"
        AuthType Basic
        AuthBasicAuthoritative on
        AuthBasicProvider external
        AuthExternal pwauth
        require valid-user
        {% endif %}

    # File to return on access control error (e.g. wrong password)
    # ErrorDocument 401 /twiki/bin/view/TWiki/TWikiRegistration
    # Alternatively if your users are all known to be registered you may want
    # to redirect them to the Reset_password page.
    # ErrorDocument 401 /twiki/bin/view/TWiki/Reset_password


&lt;/Directory&gt;
        </value>
        <description>We allow testing of the simple access rights for the twiki through an "authtest" page.
        This allows users to test the basic access without the complications of potential mistakes in TWiki itself.
        Advanced users will want to edit this here, for example to enable SSL it is a jinja2 template.</description>
    </property>
    <property>
        <name>twiki_httpd_conf</name>
        <value># Created automatically with Ambari
# All manual changes will be undone in the case of a server restart
# Edit the template through the Ambari interface instead

# Example twiki.conf file to configure Apache for TWiki.
#
# You can base your Apache configuration for TWiki on this example
# file, but you are invited to use the Apache config generator at
# http://twiki.org/cgi-bin/view/TWiki/ApacheConfigGenerator
# to easily create an Apache conf file specific to your needs.

# NOTE: If you use Apache 2.4 or later make sure to enable CGI
# in the primary apache configuration file (mod_cgi or mod_cgid).

ScriptAlias /twiki/bin "{{install_dir}}bin"

Alias /twiki/pub "{{install_dir}}pub"

# Block access to typical spam related attachments (.htm and .html files)
# Except the TWiki directory which is read only and does have attached html files.
# You should uncomment the two lines below if the TWiki is on the public Internet
#SetEnvIf Request_URI "twiki/pub/.*\.[hH][tT][mM]?$" blockAccess
#SetEnvIf Request_URI "twiki/pub/TWiki/.*\.[hH][tT][mM]?$" !blockAccess

# We set an environment variable called blockAccess.
#
# Setting a BrowserMatchNoCase to ^$ is important. It prevents TWiki from
# including its own topics as URLs and also prevents other TWikis from
# doing the same. This is important to prevent the most obvious
# Denial of Service attacks.
#
# You can expand this by adding more BrowserMatchNoCase statements to
# block evil browser agents trying the impossible task of mirroring a TWiki.
# http://twiki.org/cgi-bin/view/TWiki.ApacheConfigGenerator has a good list
# of bad spiders to block.
#
# Example:
# BrowserMatchNoCase ^SiteSucker blockAccess
BrowserMatchNoCase ^$ blockAccess


&lt;Directory "{{install_dir}}bin"&gt;
    AllowOverride None
# NOTE: For Apache 2.4 and later use "Require all granted" instead of the next two lines:
    Order Allow,Deny
    Allow from all
    Deny from env=blockAccess

    Options ExecCGI FollowSymLinks
    SetHandler cgi-script

        {% if ldap_enabled %}

        AuthType Basic
        AuthName "LDAP Authentication"
        AuthBasicProvider ldap
        AuthzLDAPAuthoritative on
        AuthLDAPURL ldap://{{ldap_host}}:{{ldap_port}}/cn=users,cn=accounts,{{ldap_base}}?{{ldap_uid}} NONE
        AuthLDAPBindDN {{ldap_uid}}={{ldap_bind_user}},cn=sysaccounts,cn=etc,{{ldap_base}}
        AuthLDAPBindPassword {{ldap_bind_password}}
        AuthLDAPGroupAttributeIsDN on
        Require ldap-group cn={{ldap_group}},cn=groups,cn=accounts,{{ldap_base}}

        {% elif enable_pam_auth %}
        AllowOverride None
        AuthName "KAVE Login"
        AuthType Basic
        AuthBasicAuthoritative on
        AuthBasicProvider external
        AuthExternal pwauth
        require valid-user
        {% else %}

        # Password file for TWiki users
        AuthUserFile /home/httpd/twiki/data/.htpasswd
        AuthName 'Enter your WikiName: (First name and last name, no space, no dots, capitalized, e.g. JohnSmith)'
        AuthType Basic
        &lt;FilesMatch "(attach|edit|manage|rename|save|upload|mail|logon|rest|.*auth).*"&gt;
            require valid-user
        &lt;/FilesMatch&gt;
        {% endif %}

    # File to return on access control error (e.g. wrong password)
    # By convention this is the TWikiRegistration page, that allows users
    # to register with the TWiki. Apache requires this to be a *local* path.
    # Comment this out if you setup TWiki to completely deny access to TWikiGuest
    # in all webs or change the path to a static html page.
    ErrorDocument 401 /twiki/bin/view/TWiki/TWikiRegistration
    # Alternatively if your users are all known to be registered you may want
    # to redirect them to the Reset_password page.
    # ErrorDocument 401 /twiki/bin/view/TWiki/Reset_password

# When using Apache type login the following defines the TWiki scripts
# that makes Apache ask the browser to authenticate. It is correct that
# scripts such as view, resetpasswd &amp; passwd are not authenticated.
# (un-comment to activate)
#&lt;FilesMatch "(attach|edit|manage|rename|save|upload|mail|logon|rest|.*auth).*"&gt;
#   require valid-user
#&lt;/FilesMatch&gt;

&lt;/Directory&gt;


# This sets the options on the pub directory, which contains attachments and
# other files like CSS stylesheets and icons. AllowOverride None stops a
# user installing a .htaccess file that overrides these options.
# Finally all execution of PHP and other scripts is disabled.

# Note that files in pub are *not* protected by TWiki Access Controls,
# so if you want to control access to files attached to topics, you may
# need to add your own .htaccess files to subdirectories of pub. See the
# Apache documentation on .htaccess for more info.

#### Change the path to match your local installation
&lt;Directory "{{install_dir}}pub"&gt;
    #if you are using an svn checkout an pseudo-install.pl, you will need to enable symlinks
    #Options FollowSymLinks
    Options None
    AllowOverride Limit
# NOTE: For Apache 2.4 and later use "Require all granted" instead of the next two lines:
    Order Allow,Deny
    Allow from all

    # If you have PHP4 or PHP5 installed as Apache module make sure the directive below is enabled
    # If you do not have PHP installed you will need to comment out the directory below
    # to avoid errors.
    # If PHP is installed as CGI this flag is not needed and will in fact make Apache fail
    php_admin_flag engine off

    # If you have PHP3 installed as Apache module make sure the directive below is enabled
    # If PHP is installed as CGI this flag is not needed and will in fact make Apache fail
    #php3_engine off

    # This line will redefine the mime type for the most common types of scripts
    AddType text/plain .shtml .php .php3 .phtml .phtm .pl .py .cgi
&lt;/Directory&gt;
    </value>
        <description>We allow testing of the simple access rights for the twiki through an "authtest" page.
        This allows users to test the basic access without the complications of potential mistakes in TWiki itself.
        Advanced users will want to edit this here, for example to enable SSL it is a jinja2 template.</description>
    </property>
</configuration>