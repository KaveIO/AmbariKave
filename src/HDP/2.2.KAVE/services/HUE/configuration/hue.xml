<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="configuration.xsl"?>

<configuration>
    <property>
        <name>web_ui_port</name>
        <value>8000</value>
        <description>HTTP PORT</description>
    </property>
    <property>
        <name>web_ui_host</name>
        <value>0.0.0.0</value>
        <description>HTTP Listen on which interface</description>
    </property>
    <property>
        <name>yarn_api_port</name>
        <value>8088</value>
        <description>Where is yarn?</description>
    </property>
    <property>
        <name>history_port</name>
        <value>19888</value>
        <description>Where is the history server?</description>
    </property>
    <property>
        <name>nodemanager_port</name>
        <value>8042</value>
        <description>Where is the node manager server? </description>
    </property>
    <property>
        <name>enable_pam_auth</name>
        <value>True</value>
        <description>Use PAM  (Pluggable Authentication Modules) for hue to find users and authenticate them.
        This will automatically create accounts in hue for users registered on the system, and so integrate with FreeIPA if you have it installed
        </description>
    </property>
    <property>
        <name>hue_ini</name>
        <value># Created automatically with Ambari
# All manual changes will be undone in the case of a server restart
# Edit the template through the Ambari interface instead

#####################################
# DEVELOPMENT EDITION
#####################################

# Hue configuration file
# ===================================
#
# For complete documentation about the contents of this file, run
#       $ &lt;hue_root&gt;/build/env/bin/hue config_help
#
# All .ini files under the current directory are treated equally.  Their
# contents are merged to form the Hue configuration, which can
# can be viewed on the Hue at
#       http://&lt;hue_host&gt;:&lt;port&gt;/dump_config


###########################################################################
# General configuration for core Desktop features (authentication, etc)
###########################################################################

[desktop]

  kredentials_dir="/tmp"

  send_dbug_messages=1

  # To show database transactions, set database_logging to 1
  database_logging=0

  # Set this to a random string, the longer the better.
  # This is used for secure hashing in the session store.
  secret_key={{secret_key}}

  # Webserver listens on this address and port
  http_host={{web_ui_host}}
  http_port={{web_ui_port}}

  # Time zone name
  time_zone=America/Los_Angeles

  # Turn off debug
  django_debug_mode=1

  # Turn off backtrace for server error
  http_500_debug_mode=1

  # Set to true to use CherryPy as the webserver, set to false
  # to use Spawning as the webserver. Defaults to Spawning if
  # key is not specified.
  use_cherrypy_server=true

  # Webserver runs as this user
  server_user=hue
  server_group=hadoop

  # If set to false, runcpserver will not actually start the web server.
  # Used if Apache is being used as a WSGI container.
  ## enable_server=yes

  # Filename of SSL Certificate
  ## ssl_certificate=

  # Filename of SSL RSA Private Key
  ## ssl_private_key=

  # Default encoding for site data
  ## default_site_encoding=utf-8

  # Options for X_FRAME_OPTIONS header. Default is SAMEORIGIN
  x_frame_options='ALLOWALL'

  [[supervisor]]
    ## celeryd=no

  # Configuration options for user authentication into the web application
  # ------------------------------------------------------------------------
  [[auth]]

    # Authentication backend. Common settings are:
    # - django.contrib.auth.backends.ModelBackend (entirely Django backend)
    # - desktop.auth.backend.AllowAllBackend (allows everyone)
    # - desktop.auth.backend.AllowFirstUserDjangoBackend
    #     (Default. Relies on Django and user manager, after the first login)
    # - desktop.auth.backend.LdapBackend
    # - desktop.auth.backend.PamBackend
    # - desktop.auth.backend.SpnegoDjangoBackend
    # - desktop.auth.backend.RemoteUserDjangoBackend
    {% if enable_pam_auth %}
    backend=desktop.auth.backend.PamBackend
    pam_service=login
    {% else %}
    backend=desktop.auth.backend.AllowFirstUserDjangoBackend
    {% endif %}


  # Configuration options for specifying the Desktop Database.  For more info,
  # see http://docs.djangoproject.com/en/1.1/ref/settings/#database-engine
  # ------------------------------------------------------------------------
  [[database]]
    engine=sqlite3
    name=/var/lib/hue/desktop.db
    # Database engine is typically one of:
    # postgresql_psycopg2, mysql, or sqlite3
    #
    # Note that for sqlite3, 'name', below is a filename;
    # for other backends, it is the database name.
    ## engine=sqlite3
    ## host=
    ## port=
    ## user=
    ## password=
    ## name=


  # Configuration options for connecting to an external SMTP server
  # ------------------------------------------------------------------------
  [[smtp]]

    # The SMTP server information for email notification delivery
    host=localhost
    port=25
    user=
    password=

    # Whether to use a TLS (secure) connection when talking to the SMTP server
    tls=no

    # Default email address to use for various automated notification from Hue
    ## default_from_email=hue@localhost


  # Configuration options for Kerberos integration for secured Hadoop clusters
  # ------------------------------------------------------------------------
  [[kerberos]]

    # Path to Hue's Kerberos keytab file
    ## hue_keytab=/etc/security/keytabs/hue.service.keytab

    # Kerberos principal name for Hue
    ## hue_principal=hue/FQDN@REALM

    # Path to kinit
    ## kinit_path=/usr/bin/kinit

    ## Frequency in seconds with which Hue will renew its keytab. Default 1h.
    ## reinit_frequency=3600

    ## Path to keep Kerberos credentials cached.
    ## ccache_path=/tmp/hue_krb5_ccache


###########################################################################
# Settings to configure your Hadoop cluster.
###########################################################################

[hadoop]

  # Configuration for HDFS NameNode
  # ------------------------------------------------------------------------
  [[hdfs_clusters]]

    [[[default]]]
      # Enter the filesystem uri
      fs_defaultfs=hdfs://{{namenode}}:{{hdfs_port}}

      # Use WebHdfs/HttpFs as the communication mechanism. To fallback to
      # using the Thrift plugin (used in Hue 1.x), this must be uncommented
      # and explicitly set to the empty value.
      webhdfs_url=http://{{namenode}}:{{webhdfs_port}}/webhdfs/v1/

      ## security_enabled=true


  [[yarn_clusters]]

    [[[default]]]
      # Whether to submit jobs to this cluster
      submit_to=true

      ## security_enabled=false

      # Resource Manager logical name (required for HA)
      ## logical_name=

      # URL of the ResourceManager webapp address (yarn.resourcemanager.webapp.address)
      resourcemanager_api_url=http://{{yarn_host}}:{{yarn_api_port}}

      # URL of Yarn RPC adress (yarn.resourcemanager.address)
      resourcemanager_rpc_url=http://{{yarn_host}}:{{yarn_rpc_port}}

      # URL of the ProxyServer API
      proxy_api_url=http://{{yarn_host}}:{{yarn_host}}

      # URL of the HistoryServer API
      history_server_api_url=http://{{history_host}}:{{history_port}}

      # URL of the NodeManager API
      node_manager_api_url=http://{{yarn_host}}:{{nodemanager_port}}

      # HA support by specifying multiple clusters
      # e.g.

      # [[[ha]]]
    # Enter the host on which you are running the failover Resource Manager
        #resourcemanager_api_url=http://failover-host:8088
        #logical_name=failover
        #submit_to=True

###########################################################################
# Settings to configure liboozie
###########################################################################

[liboozie]
  # The URL where the Oozie service runs on. This is required in order for
  # users to submit jobs.
  oozie_url=http://{{oozie_host}}:{{oozie_port}}/oozie

  ## security_enabled=true

  # Location on HDFS where the workflows/coordinator are deployed when submitted.
  ## remote_deployement_dir=/user/hue/oozie/deployments


###########################################################################
# Settings to configure the Oozie app
###########################################################################

[oozie]

###########################################################################
# Settings to configure Beeswax
###########################################################################

[beeswax]

  # Host where Hive server Thrift daemon is running.
  # If Kerberos security is enabled, use fully-qualified domain name (FQDN).
  beeswax_server_host={{hive_host}}
  hive_server_host={{hive_host}}

  # Port where HiveServer2 Thrift server runs on.
  hive_server_port={{hive_port}}

  [[ssl]]
    # SSL communication enabled for this server.
    ## enabled=false

    # Path to Certificate Authority certificates.
    ## cacerts=/etc/hue/cacerts.pem

    # Path to the private key file.
    ## key=/etc/hue/key.pem

    # Path to the public certificate file.
    ## cert=/etc/hue/cert.pem

    # Choose whether Hue should validate certificates received from the server.
    ## validate=true



[useradmin]
  # The name of the default user group that users will be a member of
  default_user_group=hadoop
  default_username=hue
  default_user_password=1111


[hcatalog]
  templeton_url=http://{{hcat_host}}:{{hcat_port}}/templeton/v1/
  security_enabled=false

[about]
  tutorials_installed=false

[pig]
  udf_path="/tmp/udfs"

</value>
        <description>The ini config file of the HUE interface.
        Advanced users or people wishing to enable ssl will need to see/modify here.
        This is a j2 template.
        </description>
    </property>
    <property>
        <name>hue_httpd_conf</name>
        <value># Created automatically with Ambari
# All manual changes will be undone in the case of a server restart
# Edit the template through the Ambari interface instead

Listen {{web_ui_port}}

WSGIPythonHome /usr/lib/hue/build/env
WSGIPythonPath /usr/lib/hue/build/env/bin/python

&lt;VirtualHost *:{{web_ui_port}}&gt;
  ServerName &lt;FQDN&gt;

  ## WSGI settings
  WSGIDaemonProcess hue_httpd display-name=hue_httpd processes=8 threads=10 user=hue
  WSGIScriptAlias / /usr/lib/hue/desktop/core/src/desktop/wsgi.py
  &lt;Directory /usr/lib/hue/desktop/core/src/desktop&gt;
    Order deny,allow
    Allow from all
  &lt;/Directory&gt;

  Alias "/static/" "/usr/lib/hue/desktop/core/static/"
  Alias "/about/static/" "/usr/lib/hue/apps/about/static/"
  Alias "/beeswax/static/" "/usr/lib/hue/apps/beeswax/static/"
  Alias "/filebrowser/static/" "/usr/lib/hue/apps/filebrowser/src/filebrowser/static/"
  Alias "/hcatalog/static/" "/usr/lib/hue/apps/hcatalog/src/hcatalog/static/"
  Alias "/help/static/" "/usr/lib/hue/apps/help/src/help/static/"
  Alias "/jobbrowser/static/" "/usr/lib/hue/apps/jobbrowser/static/"
  Alias "/jobsub/static/" "/usr/lib/hue/apps/jobsub/static/"
  Alias "/oozie/static/" "/usr/lib/hue/apps/oozie/static/"
  Alias "/pig/static/" "/usr/lib/hue/apps/pig/src/pig/static/"
  Alias "/shell/static/" "/usr/lib/hue/apps/shell/src/shell/static/"
  Alias "/useradmin/static/" "/usr/lib/hue/apps/useradmin/static/"

  &lt;IfModule mod_expires.c&gt;
    &lt;FilesMatch "\.(jpg|gif|png|css|js)$"&gt;
      ExpiresActive on
      ExpiresDefault "access plus 1 day"
    &lt;/FilesMatch&gt;
  &lt;/IfModule&gt;

  ## SSL part
  # SSLEngine on
  # SSLOptions +StrictRequire

  # SSLProtocol -all +TLSv1 +SSLv3
  # SSLCipherSuite HIGH:MEDIUM:!aNULL:+SHA1:+MD5:+HIGH:+MEDIUM

  # SSLCertificateFile /etc/ssl/hue.crt
  # SSLCertificateKeyFile /etc/ssl/hue.key

  # SSLProxyEngine off

  ## Logging
  ErrorLog /var/log/httpd/error_hue_httpd_log
  CustomLog /var/log/httpd/access_hue_httpd_log combined
&lt;/VirtualHost&gt;
</value>
        <description>The httpd config of the HUE web interface. Advanced users or people wishing to enable ssl will need to see/modify here.
        This is a j2 template.
        </description>
    </property>
</configuration>